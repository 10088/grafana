#!/bin/sh

# functions called from the ci pipeline 
# migrated here from inline yml shell block commands

# Run Veracode scan
veracode_scan() {
    echo "Starting veracode scan..."
    apk add curl
    # Increase heap size or the scanner will die.
    export _JAVA_OPTIONS=-Xmx4g
    mkdir -p ci/jobs/security_scan
    curl -sSL https://download.sourceclear.com/ci.sh | sh | tee ci/jobs/security_scan/sourclear_scan.out
    ##
    # Not failing builds now if we detect items we deem a problem in the scan output, but the following
    # Would be an example
    #
    # grep "High Risk" ci/jobs/security_scan/sourclear_scan.out && false || true
}

# Run backend coverage report
# Requires env var
# JEST_JUNIT_OUTPUT_DIR: "test-results/jest/results.xml"
code_coverage_frontend() {
    /usr/local/bin/cc-test-reporter format-coverage -t lcov -o out/codeclimate.frontend.json ci/jobs/build_frontend/coverage/lcov.info
    yarn global add jest jest-junit
    jest --ci --runInBand --reporters=default --reporters=jest-junit
}

# Run backend coverage report
code_coverage_backend() {
    mage -v coverage || true
    pwd
    WORKDIR=`pwd`
    # move src to make reporter work correcly
    mkdir -p /go/src/github.com/${CIRCLE_PROJECT_USERNAME}
    cd /go/src/github.com/${CIRCLE_PROJECT_USERNAME}
    mv ${WORKDIR} /go/src/github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}
    ls -al /go/src/github.com/${CIRCLE_PROJECT_USERNAME}
    ls -al /go/src/github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}
    cd /go/src/github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}
    export GOPATH=/go
    /usr/local/bin/cc-test-reporter format-coverage -t gocov --debug -o out/codeclimate.backend.json coverage/backend.out || true
    # move it back
    cd /
    mv /go/src/github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME} ${WORKDIR}
}

# Upload coverage results to Code Climate
upload_coverage() {
    /usr/local/bin/cc-test-reporter sum-coverage out/codeclimate.*.json -d -p 2 -o out/codeclimate.total.json
    /usr/local/bin/cc-test-reporter upload-coverage -i out/codeclimate.total.json
}

# Package Distribution (for signing/etc)
package() {
    EXEC_PREFIX=`cat ci/jobs/build_frontend/dist/plugin.json|jq '.executable'| sed s/\"//g`
    PLUGIN_NAME=`cat ci/jobs/build_frontend/dist/plugin.json|jq '.id'| sed s/\"//g`
    VERSION=`cat ci/jobs/build_frontend/dist/plugin.json|jq '.info.version'| sed s/\"//g`
    echo "Plugin Name: ${PLUGIN_NAME}"
    echo "Plugin Version: ${VERSION}"
    echo "Plugin Exec Prefix: ${EXEC_PREFIX}"
    #
    # ci-package will create the zip file
    #
    # move darwin/windows binaries aside
    #
    ls -l ci/jobs/build_backend/dist
    mv ci/jobs/build_backend/dist/${EXEC_PREFIX}_darwin_amd64 .
    mv ci/jobs/build_backend/dist/${EXEC_PREFIX}_windows_amd64.exe .
    #
    ./node_modules/.bin/grafana-toolkit plugin:ci-package
    #
    # Building separate linux and windows zip files
    #
    # 1. rename to linux package
    #
    mv ci/packages/${PLUGIN_NAME}-${VERSION}.zip \
        ci/packages/${PLUGIN_NAME}-${VERSION}.linux_amd64.zip
    mv ci/packages/${PLUGIN_NAME}-${VERSION}.zip.sha1 \
        ci/packages/${PLUGIN_NAME}-${VERSION}.linux_amd64.zip.sha1
    #
    # 2. update info.json with new zip file name
    #
    sed -i 's/zip/linux_amd64\.zip/g' ci/packages/info.json
    #
    # 3. move into linux subdir
    #
    mkdir -p temp_ci/packages/linux
    cp -p ci/packages/info.json temp_ci/packages/linux
    cp -p ci/packages/info.json temp_ci/packages/linux/info-linux.json
    mv ci/packages/${PLUGIN_NAME}* temp_ci/packages/linux
    #
    # now create the windows package
    #
    # 4. re-run ci-package to create the windows-only zip
    #
    ls -l ci/jobs/build_backend/dist
    mv ci/jobs/build_backend/dist/${EXEC_PREFIX}_linux_amd64 .
    ls -l ${EXEC_PREFIX}*
    mv ${EXEC_PREFIX}_windows_amd64.exe ci/jobs/build_backend/dist
    ls -l ci/jobs/build_backend/dist
    ./node_modules/.bin/grafana-toolkit plugin:ci-package
    #
    # 5. rename zip
    #
    mv ci/packages/${PLUGIN_NAME}-${VERSION}.zip \
        ci/packages/${PLUGIN_NAME}-${VERSION}.windows_amd64.zip
    mv ci/packages/${PLUGIN_NAME}-${VERSION}.zip.sha1 \
        ci/packages/${PLUGIN_NAME}-${VERSION}.windows_amd64.zip.sha1
    #
    # update info.json with new zip file name
    #
    sed -i 's/zip/windows_amd64\.zip/g' ci/packages/info.json
    #
    # 6. move into windows subdir
    #
    mkdir temp_ci/packages/windows
    # report needs info.json, so keep a copy here
    cp ci/packages/info.json temp_ci/packages/windows
    cp ci/packages/info.json temp_ci/packages/windows/info-windows.json
    mv ci/packages/${PLUGIN_NAME}* temp_ci/packages/windows
    #
    # now create the darwin package
    #
    # 7. re-run ci-package to create the darwin-only zip
    #
    ls -l ci/jobs/build_backend/dist
    mv ci/jobs/build_backend/dist/${EXEC_PREFIX}_windows_amd64.exe .
    mv ${EXEC_PREFIX}_darwin_amd64 ci/jobs/build_backend/dist
    ls -l ci/jobs/build_backend/dist
    ./node_modules/.bin/grafana-toolkit plugin:ci-package
    #
    # 8. rename zip
    #
    mv ci/packages/${PLUGIN_NAME}-${VERSION}.zip \
        ci/packages/${PLUGIN_NAME}-${VERSION}.darwin_amd64.zip
    mv ci/packages/${PLUGIN_NAME}-${VERSION}.zip.sha1 \
        ci/packages/${PLUGIN_NAME}-${VERSION}.darwin_amd64.zip.sha1
    #
    # update info.json with new zip file name
    #
    sed -i 's/zip/darwin_amd64\.zip/g' ci/packages/info.json
    #
    # 9. move into windows subdir
    #
    mkdir ci/packages/darwin
    # report needs info.json, so keep a copy here
    cp ci/packages/info.json ci/packages/darwin
    cp ci/packages/info.json ci/packages/darwin/info-darwin.json
    mv ci/packages/${PLUGIN_NAME}* ci/packages/darwin
    #
    # 10. put the builds back into place
    #
    mv temp_ci/packages/linux ci/packages
    mv temp_ci/packages/windows ci/packages
    # DONE
    echo Packages
    ls -lR ci/packages
    # put the executables back for GHR to use
    echo Contents of ci/jobs/build_backend/dist
    ls -lR ci/jobs/build_backend/dist
    ls -l ${EXEC_PREFIX}*
    mv ${EXEC_PREFIX}_linux_amd64 ci/jobs/build_backend/dist
    mv ${EXEC_PREFIX}_windows_amd64.exe ci/jobs/build_backend/dist
    ls -l ci/jobs/build_backend/dist
    cp -p ci/jobs/build_backend/dist/${EXEC_PREFIX}* ci/dist/${PLUGIN_NAME}/
    echo final dist for GHR
    ls -lR ci/dist
    # TODO - somehow here we missed linux_amd64
    cp -p ci/jobs/build_backend/dist/${EXEC_PREFIX}_linux_amd64 ci/grafana-test-env/plugins/${PLUGIN_NAME}/${PLUGIN_NAME}/
}